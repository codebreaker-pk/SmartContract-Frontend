{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krpra\\\\Desktop\\\\Dapps\\\\my-dapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//src/App.js\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0xf090f16dEc8b6D24082Edd25B1C8D26f2bC86128'; // Replace with the deployed contract address from deploy.js\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider.getSigner());\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const incrementValue = async () => {\n//     await contract.incrementValue();\n//     getContractValue();\n//   };\n\n//   const decrementValue = async () => {\n//     await contract.decrementValue();\n//     getContractValue();\n//   };\n\n//   const handleInputChange = (event) => {\n//     setNewValue(event.target.value);\n//   };\n\n//   const setValue = async () => {\n//     if (!newValue) return;\n//     await contract.setValue(newValue);\n//     getContractValue();\n//     setNewValue('');\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//       <br />\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\n//       <button onClick={setValue}>Set Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import detectEthereumProvider from '@metamask/detect-provider';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n//   const [walletAddress, setWalletAddress] = useState('');\n//   const [provider, setProvider] = useState(null);\n//   const [contract, setContract] = useState(null);\n\n//   const contractAddress = ' 0x114e375B6FCC6d6fCb68c7A1d407E652C54F25FB'; // Replace with the deployed contract address from deploy.js\n\n//   useEffect(() => {\n//     const initializeProvider = async () => {\n//       const provider = await detectEthereumProvider();\n\n//       if (provider) {\n//         setProvider(new ethers.providers.Web3Provider(provider));\n//       } else {\n//         console.error('Please install Metamask to interact with the wallet.');\n//       }\n//     };\n\n//     initializeProvider();\n//   }, []);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, SimpleContractABI.abi, signer));\n//     }\n//   }, [provider]);\n\n//   const getContractValue = async () => {\n//     if (contract) {\n//       const value = await contract.getValue();\n//       setContractValue(value.toString());\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (contract) {\n//       getContractValue();\n//     }\n//   }, [contract]);\n\n//   const incrementValue = async () => {\n//     if (contract) {\n//       await contract.incrementValue();\n//       getContractValue();\n//     }\n//   };\n\n//   const decrementValue = async () => {\n//     if (contract) {\n//       await contract.decrementValue();\n//       getContractValue();\n//     }\n//   };\n\n//   const handleInputChange = (event) => {\n//     setNewValue(event.target.value);\n//   };\n\n//   const setValue = async () => {\n//     if (!newValue || !contract) return;\n//     await contract.setValue(newValue);\n//     getContractValue();\n//     setNewValue('');\n//   };\n\n//   const connectWallet = async () => {\n//     if (provider) {\n//       try {\n//         const accounts = await provider.send('eth_requestAccounts', []);\n//         setWalletAddress(accounts[0]);\n//       } catch (error) {\n//         console.error('Error connecting to the wallet:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Wallet Address: {walletAddress}</p>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={connectWallet}>Connect Wallet</button>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//       <br />\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\n//       <button onClick={setValue}>Set Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { ethers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport SimpleContractABI from './contracts/SimpleContract.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [contractValue, setContractValue] = useState('');\n  const [newValue, setNewValue] = useState('');\n  const [walletAddress, setWalletAddress] = useState('');\n  const [provider, setProvider] = useState(null);\n  const [contract, setContract] = useState(null);\n  const contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3'; // Replace with the deployed contract address from deploy.js\n\n  useEffect(() => {\n    const initializeProvider = async () => {\n      const provider = await detectEthereumProvider();\n      if (provider) {\n        setProvider(new ethers.providers.Web3Provider(provider));\n      } else {\n        console.error('Please install Metamask to interact with the wallet.');\n      }\n    };\n    initializeProvider();\n  }, []);\n  useEffect(() => {\n    if (provider) {\n      const signer = provider.getSigner();\n      setContract(new ethers.Contract(contractAddress, SimpleContractABI.abi, signer));\n    }\n  }, [provider]);\n  const getContractValue = async () => {\n    if (contract) {\n      try {\n        const value = await contract.getValue();\n        setContractValue(value.toString());\n      } catch (error) {\n        console.error('Error getting contract value:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (contract) {\n      getContractValue();\n    }\n  }, [contract]);\n  const incrementValue = async () => {\n    if (contract) {\n      try {\n        await contract.incrementValue();\n        getContractValue();\n      } catch (error) {\n        console.error('Error incrementing value:', error);\n      }\n    }\n  };\n  const decrementValue = async () => {\n    if (contract) {\n      try {\n        await contract.decrementValue();\n        getContractValue();\n      } catch (error) {\n        console.error('Error decrementing value:', error);\n      }\n    }\n  };\n  const handleInputChange = event => {\n    setNewValue(event.target.value);\n  };\n  const setValue = async () => {\n    if (!newValue || !contract) return;\n    try {\n      // Parse the new value to an integer (assuming it's a number)\n      const parsedValue = parseInt(newValue);\n      await contract.setValue(parsedValue);\n      getContractValue();\n      setNewValue('');\n    } catch (error) {\n      console.error('Error setting value:', error);\n    }\n  };\n  const connectWallet = async () => {\n    if (provider) {\n      try {\n        const accounts = await provider.send('eth_requestAccounts', []);\n        setWalletAddress(accounts[0]);\n      } catch (error) {\n        console.error('Error connecting to the wallet:', error);\n      }\n    }\n  };\n  const getOwnerAddress = async () => {\n    if (contract) {\n      try {\n        const ownerAddress = await contract.getOwner();\n        console.log('Owner Address:', ownerAddress);\n      } catch (error) {\n        console.error('Error retrieving owner address:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (contract) {\n      getOwnerAddress();\n    }\n  }, [contract]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SimpleContract Frontend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wallet Address: \", walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Contract Value: \", contractValue]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementValue,\n      children: \"Increment Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: decrementValue,\n      children: \"Decrement Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: newValue,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setValue,\n      children: \"Set Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"/KO+TCqruWAZwxzd6BjdfeXbhhE=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const incrementValue = async () => {\n//     try {\n//       // Check if MetaMask is installed and accessible\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.incrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const decrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.decrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = ' 0xf090f16dEc8b6D24082Edd25B1C8D26f2bC86128';\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const handleSetValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.setValue(newValue);\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleIncrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.incrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleDecrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.decrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <div>\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\n//         <button onClick={handleSetValue}>Set Value</button>\n//       </div>\n//       <button onClick={handleIncrementValue}>Increment Value</button>\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ethers","detectEthereumProvider","SimpleContractABI","jsxDEV","_jsxDEV","App","_s","contractValue","setContractValue","newValue","setNewValue","walletAddress","setWalletAddress","provider","setProvider","contract","setContract","contractAddress","initializeProvider","providers","Web3Provider","console","error","signer","getSigner","Contract","abi","getContractValue","value","getValue","toString","incrementValue","decrementValue","handleInputChange","event","target","setValue","parsedValue","parseInt","connectWallet","accounts","send","getOwnerAddress","ownerAddress","getOwner","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","onChange","_c","$RefreshReg$"],"sources":["C:/Users/krpra/Desktop/Dapps/my-dapp/src/App.js"],"sourcesContent":["//src/App.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0xf090f16dEc8b6D24082Edd25B1C8D26f2bC86128'; // Replace with the deployed contract address from deploy.js\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider.getSigner());\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const incrementValue = async () => {\r\n//     await contract.incrementValue();\r\n//     getContractValue();\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     await contract.decrementValue();\r\n//     getContractValue();\r\n//   };\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setNewValue(event.target.value);\r\n//   };\r\n\r\n//   const setValue = async () => {\r\n//     if (!newValue) return;\r\n//     await contract.setValue(newValue);\r\n//     getContractValue();\r\n//     setNewValue('');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//       <br />\r\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\r\n//       <button onClick={setValue}>Set Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import detectEthereumProvider from '@metamask/detect-provider';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n//   const [walletAddress, setWalletAddress] = useState('');\r\n//   const [provider, setProvider] = useState(null);\r\n//   const [contract, setContract] = useState(null);\r\n\r\n//   const contractAddress = ' 0x114e375B6FCC6d6fCb68c7A1d407E652C54F25FB'; // Replace with the deployed contract address from deploy.js\r\n\r\n//   useEffect(() => {\r\n//     const initializeProvider = async () => {\r\n//       const provider = await detectEthereumProvider();\r\n\r\n//       if (provider) {\r\n//         setProvider(new ethers.providers.Web3Provider(provider));\r\n//       } else {\r\n//         console.error('Please install Metamask to interact with the wallet.');\r\n//       }\r\n//     };\r\n\r\n//     initializeProvider();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (provider) {\r\n//       const signer = provider.getSigner();\r\n//       setContract(new ethers.Contract(contractAddress, SimpleContractABI.abi, signer));\r\n//     }\r\n//   }, [provider]);\r\n\r\n//   const getContractValue = async () => {\r\n//     if (contract) {\r\n//       const value = await contract.getValue();\r\n//       setContractValue(value.toString());\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (contract) {\r\n//       getContractValue();\r\n//     }\r\n//   }, [contract]);\r\n\r\n//   const incrementValue = async () => {\r\n//     if (contract) {\r\n//       await contract.incrementValue();\r\n//       getContractValue();\r\n//     }\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     if (contract) {\r\n//       await contract.decrementValue();\r\n//       getContractValue();\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setNewValue(event.target.value);\r\n//   };\r\n\r\n//   const setValue = async () => {\r\n//     if (!newValue || !contract) return;\r\n//     await contract.setValue(newValue);\r\n//     getContractValue();\r\n//     setNewValue('');\r\n//   };\r\n\r\n//   const connectWallet = async () => {\r\n//     if (provider) {\r\n//       try {\r\n//         const accounts = await provider.send('eth_requestAccounts', []);\r\n//         setWalletAddress(accounts[0]);\r\n//       } catch (error) {\r\n//         console.error('Error connecting to the wallet:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Wallet Address: {walletAddress}</p>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={connectWallet}>Connect Wallet</button>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//       <br />\r\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\r\n//       <button onClick={setValue}>Set Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { ethers } from 'ethers';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\nimport SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\nconst App = () => {\r\n  const [contractValue, setContractValue] = useState('');\r\n  const [newValue, setNewValue] = useState('');\r\n  const [walletAddress, setWalletAddress] = useState('');\r\n  const [provider, setProvider] = useState(null);\r\n  const [contract, setContract] = useState(null);\r\n\r\n  const contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3'; // Replace with the deployed contract address from deploy.js\r\n\r\n  useEffect(() => {\r\n    const initializeProvider = async () => {\r\n      const provider = await detectEthereumProvider();\r\n\r\n      if (provider) {\r\n        setProvider(new ethers.providers.Web3Provider(provider));\r\n      } else {\r\n        console.error('Please install Metamask to interact with the wallet.');\r\n      }\r\n    };\r\n\r\n    initializeProvider();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (provider) {\r\n      const signer = provider.getSigner();\r\n      setContract(new ethers.Contract(contractAddress, SimpleContractABI.abi, signer));\r\n    }\r\n  }, [provider]);\r\n\r\n  const getContractValue = async () => {\r\n    if (contract) {\r\n      try {\r\n        const value = await contract.getValue();\r\n        setContractValue(value.toString());\r\n      } catch (error) {\r\n        console.error('Error getting contract value:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (contract) {\r\n      getContractValue();\r\n    }\r\n  }, [contract]);\r\n\r\n  const incrementValue = async () => {\r\n    if (contract) {\r\n      try {\r\n        await contract.incrementValue();\r\n        getContractValue();\r\n      } catch (error) {\r\n        console.error('Error incrementing value:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const decrementValue = async () => {\r\n    if (contract) {\r\n      try {\r\n        await contract.decrementValue();\r\n        getContractValue();\r\n      } catch (error) {\r\n        console.error('Error decrementing value:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setNewValue(event.target.value);\r\n  };\r\n\r\n  const setValue = async () => {\r\n    if (!newValue || !contract) return;\r\n    try {\r\n      // Parse the new value to an integer (assuming it's a number)\r\n      const parsedValue = parseInt(newValue);\r\n      await contract.setValue(parsedValue);\r\n      getContractValue();\r\n      setNewValue('');\r\n    } catch (error) {\r\n      console.error('Error setting value:', error);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    if (provider) {\r\n      try {\r\n        const accounts = await provider.send('eth_requestAccounts', []);\r\n        setWalletAddress(accounts[0]);\r\n      } catch (error) {\r\n        console.error('Error connecting to the wallet:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getOwnerAddress = async () => {\r\n    if (contract) {\r\n      try {\r\n        const ownerAddress = await contract.getOwner();\r\n        console.log('Owner Address:', ownerAddress);\r\n      } catch (error) {\r\n        console.error('Error retrieving owner address:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (contract) {\r\n      getOwnerAddress();\r\n    }\r\n  }, [contract]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>SimpleContract Frontend</h1>\r\n      <p>Wallet Address: {walletAddress}</p>\r\n      <p>Contract Value: {contractValue}</p>\r\n      <button onClick={connectWallet}>Connect Wallet</button>\r\n      <button onClick={incrementValue}>Increment Value</button>\r\n      <button onClick={decrementValue}>Decrement Value</button>\r\n      <br />\r\n      <input type=\"number\" value={newValue} onChange={handleInputChange} />\r\n      <button onClick={setValue}>Set Value</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const incrementValue = async () => {\r\n//     try {\r\n//       // Check if MetaMask is installed and accessible\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.incrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.decrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = ' 0xf090f16dEc8b6D24082Edd25B1C8D26f2bC86128';\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const handleSetValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.setValue(newValue);\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleIncrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.incrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDecrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.decrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <div>\r\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\r\n//         <button onClick={handleSetValue}>Set Value</button>\r\n//       </div>\r\n//       <button onClick={handleIncrementValue}>Increment Value</button>\r\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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;MAAAW,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV,CAAC;AAAC7C,EAAA,CA/HID,GAAG;AAAAkD,EAAA,GAAHlD,GAAG;AAiIT,eAAeA,GAAG;;AAQlB;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}