{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krpra\\\\Desktop\\\\Dapps\\\\my-dapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9'; // Replace with the deployed contract address from deploy.js\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider.getSigner());\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const incrementValue = async () => {\n//     await contract.incrementValue();\n//     getContractValue();\n//   };\n\n//   const decrementValue = async () => {\n//     await contract.decrementValue();\n//     getContractValue();\n//   };\n\n//   const handleInputChange = (event) => {\n//     setNewValue(event.target.value);\n//   };\n\n//   const setValue = async () => {\n//     if (!newValue) return;\n//     await contract.setValue(newValue);\n//     getContractValue();\n//     setNewValue('');\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//       <br />\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\n//       <button onClick={setValue}>Set Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const incrementValue = async () => {\n//     try {\n//       // Check if MetaMask is installed and accessible\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.incrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const decrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.decrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const handleSetValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.setValue(newValue);\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleIncrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.incrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleDecrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.decrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <div>\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\n//         <button onClick={handleSetValue}>Set Value</button>\n//       </div>\n//       <button onClick={handleIncrementValue}>Increment Value</button>\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import detectEthereumProvider from '@metamask/detect-provider';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const contractAddress = '0x821f3361D454cc98b7555221A06Be563a7E2E0A6';\n// const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n// const App = () => {\n//   const [provider, setProvider] = useState(null);\n//   const [walletAddress, setWalletAddress] = useState('');\n//   const [balance, setBalance] = useState(0);\n\n//   useEffect(() => {\n//     const initializeProvider = async () => {\n//       const provider = await detectEthereumProvider();\n\n//       if (provider) {\n//         setProvider(provider);\n//         subscribeToAccountsChanges(provider);\n//       } else {\n//         console.error('Please install Metamask to interact with the wallet.');\n//       }\n//     };\n\n//     initializeProvider();\n//   }, []);\n\n//   const subscribeToAccountsChanges = (provider) => {\n//     provider.on('accountsChanged', (accounts) => {\n//       setWalletAddress(accounts[0]);\n//       getBalance(); // Fetch balance whenever the connected account changes\n//     });\n//   };\n\n//   const connectWallet = async () => {\n//     try {\n//       const accounts = await provider.request({ method: 'eth_requestAccounts' });\n//       setWalletAddress(accounts[0]); // Set the wallet address after connecting\n//     } catch (error) {\n//       console.error('Error connecting to the wallet:', error);\n//     }\n//   };\n\n//   const getBalance = async () => {\n//     if (walletAddress && provider) {\n//       const web3Provider = new ethers.providers.Web3Provider(provider); // Use Web3Provider\n//       const balance = await web3Provider.getBalance(walletAddress); // Use web3Provider.getBalance\n//       setBalance(ethers.utils.formatEther(balance));\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Metamask Wallet Integration</h1>\n//       <p>Wallet Address: {walletAddress}</p>\n//       <p>Balance: {balance} ETH</p>\n//       <button onClick={connectWallet}>Connect Wallet</button>\n//       <button onClick={getBalance}>Get Balance</button>\n//       {/* Add other transaction functions and UI elements */}\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport SimpleContractABI from './contracts/SimpleContract.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [walletAddress, setWalletAddress] = useState('');\n  const [balance, setBalance] = useState(0);\n  const contractAddress = '0x821f3361D454cc98b7555221A06Be563a7E2E0A6';\n  const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi);\n  useEffect(() => {\n    const initializeProvider = async () => {\n      const provider = await detectEthereumProvider();\n      if (provider) {\n        setProvider(provider);\n        subscribeToAccountsChanges(provider);\n      } else {\n        console.error('Please install Metamask to interact with the wallet.');\n      }\n    };\n    initializeProvider();\n  }, []);\n  const subscribeToAccountsChanges = provider => {\n    provider.on('accountsChanged', accounts => {\n      setWalletAddress(accounts[0]);\n    });\n  };\n  const connectWallet = async () => {\n    try {\n      await provider.request({\n        method: 'eth_requestAccounts'\n      });\n    } catch (error) {\n      console.error('Error connecting to the wallet:', error);\n    }\n  };\n  const getBalance = async () => {\n    if (walletAddress && provider) {\n      const {\n        getBalance\n      } = new ethers.providers.Web3Provider(provider);\n      const balance = await getBalance(walletAddress);\n      setBalance(ethers.utils.formatEther(balance));\n    }\n  };\n  const incrementValue = async () => {\n    try {\n      if (walletAddress && provider) {\n        const contractWithSigner = contract.connect(provider.getSigner());\n        await contractWithSigner.incrementValue({\n          value: ethers.utils.parseEther('0.1')\n        });\n        getBalance();\n      }\n    } catch (error) {\n      console.error('Error incrementing value:', error);\n    }\n  };\n  const withdraw = async () => {\n    try {\n      if (walletAddress && provider) {\n        const contractWithSigner = contract.connect(provider.getSigner());\n        await contractWithSigner.withdraw();\n        getBalance();\n      }\n    } catch (error) {\n      console.error('Error withdrawing:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Metamask Wallet Integration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wallet Address: \", walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Balance: \", balance, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getBalance,\n      children: \"Get Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementValue,\n      children: \"Increment Value (Pay 0.1 ETH)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: withdraw,\n      children: \"Withdraw (Owner Only)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Z7/Xj1zIQnOVi6acC/ss7vV8hGE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","ethers","detectEthereumProvider","SimpleContractABI","jsxDEV","_jsxDEV","App","_s","provider","setProvider","walletAddress","setWalletAddress","balance","setBalance","contractAddress","contract","Contract","abi","initializeProvider","subscribeToAccountsChanges","console","error","on","accounts","connectWallet","request","method","getBalance","providers","Web3Provider","utils","formatEther","incrementValue","contractWithSigner","connect","getSigner","value","parseEther","withdraw","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/krpra/Desktop/Dapps/my-dapp/src/App.js"],"sourcesContent":["// src/App.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9'; // Replace with the deployed contract address from deploy.js\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider.getSigner());\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const incrementValue = async () => {\r\n//     await contract.incrementValue();\r\n//     getContractValue();\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     await contract.decrementValue();\r\n//     getContractValue();\r\n//   };\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setNewValue(event.target.value);\r\n//   };\r\n\r\n//   const setValue = async () => {\r\n//     if (!newValue) return;\r\n//     await contract.setValue(newValue);\r\n//     getContractValue();\r\n//     setNewValue('');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//       <br />\r\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\r\n//       <button onClick={setValue}>Set Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const incrementValue = async () => {\r\n//     try {\r\n//       // Check if MetaMask is installed and accessible\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.incrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.decrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const handleSetValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.setValue(newValue);\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleIncrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.incrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDecrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.decrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <div>\r\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\r\n//         <button onClick={handleSetValue}>Set Value</button>\r\n//       </div>\r\n//       <button onClick={handleIncrementValue}>Increment Value</button>\r\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\n// import { useState, useEffect } from 'react';\r\n// import { ethers } from 'ethers';\r\n// import detectEthereumProvider from '@metamask/detect-provider';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const contractAddress = '0x821f3361D454cc98b7555221A06Be563a7E2E0A6';\r\n// const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n// const App = () => {\r\n//   const [provider, setProvider] = useState(null);\r\n//   const [walletAddress, setWalletAddress] = useState('');\r\n//   const [balance, setBalance] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const initializeProvider = async () => {\r\n//       const provider = await detectEthereumProvider();\r\n\r\n//       if (provider) {\r\n//         setProvider(provider);\r\n//         subscribeToAccountsChanges(provider);\r\n//       } else {\r\n//         console.error('Please install Metamask to interact with the wallet.');\r\n//       }\r\n//     };\r\n\r\n//     initializeProvider();\r\n//   }, []);\r\n\r\n//   const subscribeToAccountsChanges = (provider) => {\r\n//     provider.on('accountsChanged', (accounts) => {\r\n//       setWalletAddress(accounts[0]);\r\n//       getBalance(); // Fetch balance whenever the connected account changes\r\n//     });\r\n//   };\r\n\r\n//   const connectWallet = async () => {\r\n//     try {\r\n//       const accounts = await provider.request({ method: 'eth_requestAccounts' });\r\n//       setWalletAddress(accounts[0]); // Set the wallet address after connecting\r\n//     } catch (error) {\r\n//       console.error('Error connecting to the wallet:', error);\r\n//     }\r\n//   };\r\n\r\n//   const getBalance = async () => {\r\n//     if (walletAddress && provider) {\r\n//       const web3Provider = new ethers.providers.Web3Provider(provider); // Use Web3Provider\r\n//       const balance = await web3Provider.getBalance(walletAddress); // Use web3Provider.getBalance\r\n//       setBalance(ethers.utils.formatEther(balance));\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>Metamask Wallet Integration</h1>\r\n//       <p>Wallet Address: {walletAddress}</p>\r\n//       <p>Balance: {balance} ETH</p>\r\n//       <button onClick={connectWallet}>Connect Wallet</button>\r\n//       <button onClick={getBalance}>Get Balance</button>\r\n//       {/* Add other transaction functions and UI elements */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\nimport SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\nconst App = () => {\r\n  const [provider, setProvider] = useState(null);\r\n  const [walletAddress, setWalletAddress] = useState('');\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  const contractAddress = '0x821f3361D454cc98b7555221A06Be563a7E2E0A6';\r\n  const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi);\r\n\r\n  useEffect(() => {\r\n    const initializeProvider = async () => {\r\n      const provider = await detectEthereumProvider();\r\n\r\n      if (provider) {\r\n        setProvider(provider);\r\n        subscribeToAccountsChanges(provider);\r\n      } else {\r\n        console.error('Please install Metamask to interact with the wallet.');\r\n      }\r\n    };\r\n\r\n    initializeProvider()\r\n  }, []);\r\n\r\n  const subscribeToAccountsChanges = (provider) => {\r\n    provider.on('accountsChanged', (accounts) => {\r\n      setWalletAddress(accounts[0]);\r\n    });\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      await provider.request({ method: 'eth_requestAccounts' });\r\n    } catch (error) {\r\n      console.error('Error connecting to the wallet:', error);\r\n    }\r\n  };\r\n\r\n  const getBalance = async () => {\r\n    if (walletAddress && provider) {\r\n      const { getBalance } = new ethers.providers.Web3Provider(provider);\r\n      const balance = await getBalance(walletAddress);\r\n      setBalance(ethers.utils.formatEther(balance));\r\n    }\r\n  };\r\n\r\n  const incrementValue = async () => {\r\n    try {\r\n      if (walletAddress && provider) {\r\n        const contractWithSigner = contract.connect(provider.getSigner());\r\n        await contractWithSigner.incrementValue({ value: ethers.utils.parseEther('0.1') });\r\n        getBalance();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error incrementing value:', error);\r\n    }\r\n  };\r\n\r\n  const withdraw = async () => {\r\n    try {\r\n      if (walletAddress && provider) {\r\n        const contractWithSigner = contract.connect(provider.getSigner());\r\n        await contractWithSigner.withdraw();\r\n        getBalance();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error withdrawing:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Metamask Wallet Integration</h1>\r\n      <p>Wallet Address: {walletAddress}</p>\r\n      <p>Balance: {balance} ETH</p>\r\n      <button onClick={connectWallet}>Connect Wallet</button>\r\n      <button onClick={getBalance}>Get Balance</button>\r\n      <button onClick={incrementValue}>Increment Value (Pay 0.1 ETH)</button>\r\n      <button onClick={withdraw}>Withdraw (Owner Only)</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}