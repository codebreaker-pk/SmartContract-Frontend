{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krpra\\\\Desktop\\\\Dapps\\\\my-dapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9'; // Replace with the deployed contract address from deploy.js\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider.getSigner());\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const incrementValue = async () => {\n//     await contract.incrementValue();\n//     getContractValue();\n//   };\n\n//   const decrementValue = async () => {\n//     await contract.decrementValue();\n//     getContractValue();\n//   };\n\n//   const handleInputChange = (event) => {\n//     setNewValue(event.target.value);\n//   };\n\n//   const setValue = async () => {\n//     if (!newValue) return;\n//     await contract.setValue(newValue);\n//     getContractValue();\n//     setNewValue('');\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//       <br />\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\n//       <button onClick={setValue}>Set Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const incrementValue = async () => {\n//     try {\n//       // Check if MetaMask is installed and accessible\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.incrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const decrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.decrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const handleSetValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.setValue(newValue);\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleIncrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.incrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleDecrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.decrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <div>\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\n//         <button onClick={handleSetValue}>Set Value</button>\n//       </div>\n//       <button onClick={handleIncrementValue}>Increment Value</button>\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import detectEthereumProvider from '@metamask/detect-provider';\n\n// const App = () => {\n//   const [provider, setProvider] = useState(null);\n//   const [walletAddress, setWalletAddress] = useState('');\n//   const [balance, setBalance] = useState(0);\n\n//   useEffect(() => {\n//     const initializeProvider = async () => {\n//       const provider = await detectEthereumProvider();\n\n//       if (provider) {\n//         setProvider(provider);\n//         subscribeToAccountsChanges(provider);\n//       } else {\n//         console.error('Please install Metamask to interact with the wallet.');\n//       }\n//     };\n\n//     initializeProvider();\n//   }, []);\n\n//   const subscribeToAccountsChanges = (provider) => {\n//     provider.on('accountsChanged', (accounts) => {\n//       setWalletAddress(accounts[0]);\n//     });\n//   };\n\n//   const connectWallet = async () => {\n//     try {\n//       await provider.request({ method: 'eth_requestAccounts' });\n//     } catch (error) {\n//       console.error('Error connecting to the wallet:', error);\n//     }\n//   };\n\n//   const getBalance = async () => {\n//     if (walletAddress && provider) {\n//       const { getBalance } = new ethers.providers.Web3Provider(provider);\n//       const balance = await getBalance(walletAddress);\n//       setBalance(ethers.utils.formatEther(balance));\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Metamask Wallet Integration</h1>\n//       <p>Wallet Address: {walletAddress}</p>\n//       <p>Balance: {balance} ETH</p>\n//       <button onClick={connectWallet}>Connect Wallet</button>\n//       <button onClick={getBalance}>Get Balance</button>\n//       {/* Add other transaction functions and UI elements */}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n//   const [contractOwner, setContractOwner] = useState('');\n//   const [contractBalance, setContractBalance] = useState(0);\n\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0x49fd2BE640DB2910c2fAb69bB8531Ab6E76127ff';\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   const getContractOwner = async () => {\n//     const owner = await contract.owner();\n//     setContractOwner(owner);\n//   };\n\n//   const getContractBalance = async () => {\n//     const balance = await provider.getBalance(contractAddress);\n//     setContractBalance(ethers.utils.formatEther(balance));\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//     getContractOwner();\n//     getContractBalance();\n//   }, []);\n\n//   const handleSetValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.setValue(newValue);\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleIncrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.incrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleDecrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.decrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleDonateEther = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         // Let's send 0.1 Ether as a donation (can be customized as needed)\n//         const donationAmount = ethers.utils.parseEther('0.1');\n//         await contractWithSigner.donate({ value: donationAmount });\n//         getContractBalance();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleWithdrawEther = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         // Check if the sender is the contract owner before allowing the withdrawal\n//         const owner = await contract.owner();\n//         if (accounts[0] !== owner) {\n//           alert('You are not the contract owner. Only the owner can withdraw Ether.');\n//           return;\n//         }\n\n//         await contractWithSigner.withdraw();\n//         getContractBalance();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <p>Contract Owner: {contractOwner}</p>\n//       <p>Contract Balance: {contractBalance} Ether</p>\n//       <div>\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\n//         <button onClick={handleSetValue}>Set Value</button>\n//       </div>\n//       <button onClick={handleIncrementValue}>Increment Value</button>\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\n//       <button onClick={handleDonateEther}>Donate Ether</button>\n//       <button onClick={handleWithdrawEther}>Withdraw Ether (Owner Only)</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Web3 from 'web3'; // Import Web3 library\nimport SimpleContractABI from './contracts/SimpleContract.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [contractValue, setContractValue] = useState('');\n  const [newValue, setNewValue] = useState('');\n  const [walletBalance, setWalletBalance] = useState('');\n  const provider = new Web3.providers.HttpProvider('http://localhost:8545'); // Update the URL to your local network\n  const web3 = new Web3(provider);\n  const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\n  const contract = new web3.eth.Contract(SimpleContractABI.abi, contractAddress);\n  const getContractValue = async () => {\n    const value = await contract.methods.getValue().call();\n    setContractValue(value);\n  };\n  const getWalletBalance = async () => {\n    const accounts = await web3.eth.getAccounts();\n    if (accounts.length > 0) {\n      const balance = await web3.eth.getBalance(accounts[0]);\n      setWalletBalance(web3.utils.fromWei(balance, 'ether'));\n    }\n  };\n  useEffect(() => {\n    getContractValue();\n    getWalletBalance();\n  }, []);\n  const handleSetValue = async () => {\n    try {\n      if (window.ethereum) {\n        await window.ethereum.enable(); // Request access to the user's accounts\n        const accounts = await web3.eth.getAccounts();\n        if (accounts.length > 0) {\n          const gasPrice = await web3.eth.getGasPrice();\n          const contractWithSigner = contract.clone();\n          contractWithSigner.options.from = accounts[0];\n          contractWithSigner.options.gasPrice = gasPrice;\n          contractWithSigner.options.gas = 3000000; // Set an appropriate gas limit\n\n          await contractWithSigner.methods.setValue(newValue).send();\n          getContractValue();\n        } else {\n          alert('No accounts found in MetaMask.');\n        }\n      } else {\n        alert('MetaMask is not installed or not accessible.');\n      }\n    } catch (error) {\n      console.error('Error sending transaction:', error);\n    }\n  };\n\n  // ... Same handleIncrementValue and handleDecrementValue methods ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SimpleContract Frontend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Contract Value: \", contractValue]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wallet Balance: \", walletBalance, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: newValue,\n        onChange: e => setNewValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSetValue,\n        children: \"Set Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 503,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"g+oSM6RWPaC7tlsuQY5ixHDd0OQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","SimpleContractABI","jsxDEV","_jsxDEV","App","_s","contractValue","setContractValue","newValue","setNewValue","walletBalance","setWalletBalance","provider","providers","HttpProvider","web3","contractAddress","contract","eth","Contract","abi","getContractValue","value","methods","getValue","call","getWalletBalance","accounts","getAccounts","length","balance","getBalance","utils","fromWei","handleSetValue","window","ethereum","enable","gasPrice","getGasPrice","contractWithSigner","clone","options","from","gas","setValue","send","alert","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/krpra/Desktop/Dapps/my-dapp/src/App.js"],"sourcesContent":["// src/App.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9'; // Replace with the deployed contract address from deploy.js\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider.getSigner());\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const incrementValue = async () => {\r\n//     await contract.incrementValue();\r\n//     getContractValue();\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     await contract.decrementValue();\r\n//     getContractValue();\r\n//   };\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setNewValue(event.target.value);\r\n//   };\r\n\r\n//   const setValue = async () => {\r\n//     if (!newValue) return;\r\n//     await contract.setValue(newValue);\r\n//     getContractValue();\r\n//     setNewValue('');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//       <br />\r\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\r\n//       <button onClick={setValue}>Set Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const incrementValue = async () => {\r\n//     try {\r\n//       // Check if MetaMask is installed and accessible\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.incrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.decrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const handleSetValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.setValue(newValue);\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleIncrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.incrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDecrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.decrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <div>\r\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\r\n//         <button onClick={handleSetValue}>Set Value</button>\r\n//       </div>\r\n//       <button onClick={handleIncrementValue}>Increment Value</button>\r\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\n// import { useState, useEffect } from 'react';\r\n// import { ethers } from 'ethers';\r\n// import detectEthereumProvider from '@metamask/detect-provider';\r\n\r\n// const App = () => {\r\n//   const [provider, setProvider] = useState(null);\r\n//   const [walletAddress, setWalletAddress] = useState('');\r\n//   const [balance, setBalance] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const initializeProvider = async () => {\r\n//       const provider = await detectEthereumProvider();\r\n\r\n//       if (provider) {\r\n//         setProvider(provider);\r\n//         subscribeToAccountsChanges(provider);\r\n//       } else {\r\n//         console.error('Please install Metamask to interact with the wallet.');\r\n//       }\r\n//     };\r\n\r\n//     initializeProvider();\r\n//   }, []);\r\n\r\n//   const subscribeToAccountsChanges = (provider) => {\r\n//     provider.on('accountsChanged', (accounts) => {\r\n//       setWalletAddress(accounts[0]);\r\n//     });\r\n//   };\r\n\r\n//   const connectWallet = async () => {\r\n//     try {\r\n//       await provider.request({ method: 'eth_requestAccounts' });\r\n//     } catch (error) {\r\n//       console.error('Error connecting to the wallet:', error);\r\n//     }\r\n//   };\r\n\r\n//   const getBalance = async () => {\r\n//     if (walletAddress && provider) {\r\n//       const { getBalance } = new ethers.providers.Web3Provider(provider);\r\n//       const balance = await getBalance(walletAddress);\r\n//       setBalance(ethers.utils.formatEther(balance));\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>Metamask Wallet Integration</h1>\r\n//       <p>Wallet Address: {walletAddress}</p>\r\n//       <p>Balance: {balance} ETH</p>\r\n//       <button onClick={connectWallet}>Connect Wallet</button>\r\n//       <button onClick={getBalance}>Get Balance</button>\r\n//       {/* Add other transaction functions and UI elements */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n//   const [contractOwner, setContractOwner] = useState('');\r\n//   const [contractBalance, setContractBalance] = useState(0);\r\n\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0x49fd2BE640DB2910c2fAb69bB8531Ab6E76127ff';\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   const getContractOwner = async () => {\r\n//     const owner = await contract.owner();\r\n//     setContractOwner(owner);\r\n//   };\r\n\r\n//   const getContractBalance = async () => {\r\n//     const balance = await provider.getBalance(contractAddress);\r\n//     setContractBalance(ethers.utils.formatEther(balance));\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//     getContractOwner();\r\n//     getContractBalance();\r\n//   }, []);\r\n\r\n//   const handleSetValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.setValue(newValue);\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleIncrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.incrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDecrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.decrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDonateEther = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         // Let's send 0.1 Ether as a donation (can be customized as needed)\r\n//         const donationAmount = ethers.utils.parseEther('0.1');\r\n//         await contractWithSigner.donate({ value: donationAmount });\r\n//         getContractBalance();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleWithdrawEther = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         // Check if the sender is the contract owner before allowing the withdrawal\r\n//         const owner = await contract.owner();\r\n//         if (accounts[0] !== owner) {\r\n//           alert('You are not the contract owner. Only the owner can withdraw Ether.');\r\n//           return;\r\n//         }\r\n\r\n//         await contractWithSigner.withdraw();\r\n//         getContractBalance();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <p>Contract Owner: {contractOwner}</p>\r\n//       <p>Contract Balance: {contractBalance} Ether</p>\r\n//       <div>\r\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\r\n//         <button onClick={handleSetValue}>Set Value</button>\r\n//       </div>\r\n//       <button onClick={handleIncrementValue}>Increment Value</button>\r\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\r\n//       <button onClick={handleDonateEther}>Donate Ether</button>\r\n//       <button onClick={handleWithdrawEther}>Withdraw Ether (Owner Only)</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Web3 from 'web3'; // Import Web3 library\r\nimport SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\nconst App = () => {\r\n  const [contractValue, setContractValue] = useState('');\r\n  const [newValue, setNewValue] = useState('');\r\n  const [walletBalance, setWalletBalance] = useState('');\r\n\r\n  const provider = new Web3.providers.HttpProvider('http://localhost:8545'); // Update the URL to your local network\r\n  const web3 = new Web3(provider);\r\n\r\n  const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\r\n  const contract = new web3.eth.Contract(SimpleContractABI.abi, contractAddress);\r\n\r\n  const getContractValue = async () => {\r\n    const value = await contract.methods.getValue().call();\r\n    setContractValue(value);\r\n  };\r\n\r\n  const getWalletBalance = async () => {\r\n    const accounts = await web3.eth.getAccounts();\r\n    if (accounts.length > 0) {\r\n      const balance = await web3.eth.getBalance(accounts[0]);\r\n      setWalletBalance(web3.utils.fromWei(balance, 'ether'));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getContractValue();\r\n    getWalletBalance();\r\n  }, []);\r\n\r\n  const handleSetValue = async () => {\r\n    try {\r\n      if (window.ethereum) {\r\n        await window.ethereum.enable(); // Request access to the user's accounts\r\n        const accounts = await web3.eth.getAccounts();\r\n        if (accounts.length > 0) {\r\n          const gasPrice = await web3.eth.getGasPrice();\r\n          const contractWithSigner = contract.clone();\r\n          contractWithSigner.options.from = accounts[0];\r\n          contractWithSigner.options.gasPrice = gasPrice;\r\n          contractWithSigner.options.gas = 3000000; // Set an appropriate gas limit\r\n\r\n          await contractWithSigner.methods.setValue(newValue).send();\r\n          getContractValue();\r\n        } else {\r\n          alert('No accounts found in MetaMask.');\r\n        }\r\n      } else {\r\n        alert('MetaMask is not installed or not accessible.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending transaction:', error);\r\n    }\r\n  };\r\n\r\n  // ... Same handleIncrementValue and handleDecrementValue methods ...\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>SimpleContract Frontend</h1>\r\n      <p>Contract Value: {contractValue}</p>\r\n      <p>Wallet Balance: {walletBalance} ETH</p>\r\n      <div>\r\n        <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\r\n        <button onClick={handleSetValue}>Set Value</button>\r\n      </div>\r\n      {/* ... Same buttons for handleIncrementValue and handleDecrementValue ... */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,IAAI,MAAM,MAAM,CAAC,CAAC;AACzB,OAAOC,iBAAiB,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMc,QAAQ,GAAG,IAAIZ,IAAI,CAACa,SAAS,CAACC,YAAY,CAAC,uBAAuB,CAAC,CAAC,CAAC;EAC3E,MAAMC,IAAI,GAAG,IAAIf,IAAI,CAACY,QAAQ,CAAC;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}