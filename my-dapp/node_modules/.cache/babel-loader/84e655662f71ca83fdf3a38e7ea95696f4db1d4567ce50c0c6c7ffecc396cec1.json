{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krpra\\\\Desktop\\\\Dapps\\\\my-dapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9'; // Replace with the deployed contract address from deploy.js\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider.getSigner());\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const incrementValue = async () => {\n//     await contract.incrementValue();\n//     getContractValue();\n//   };\n\n//   const decrementValue = async () => {\n//     await contract.decrementValue();\n//     getContractValue();\n//   };\n\n//   const handleInputChange = (event) => {\n//     setNewValue(event.target.value);\n//   };\n\n//   const setValue = async () => {\n//     if (!newValue) return;\n//     await contract.setValue(newValue);\n//     getContractValue();\n//     setNewValue('');\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//       <br />\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\n//       <button onClick={setValue}>Set Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const incrementValue = async () => {\n//     try {\n//       // Check if MetaMask is installed and accessible\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.incrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const decrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.decrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const handleSetValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.setValue(newValue);\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleIncrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.incrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleDecrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.decrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <div>\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\n//         <button onClick={handleSetValue}>Set Value</button>\n//       </div>\n//       <button onClick={handleIncrementValue}>Increment Value</button>\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import { useState, useEffect } from 'react';\n// import { ethers } from 'ethers';\n// import detectEthereumProvider from '@metamask/detect-provider';\n\n// const App = () => {\n//   const [provider, setProvider] = useState(null);\n//   const [walletAddress, setWalletAddress] = useState('');\n//   const [balance, setBalance] = useState(0);\n\n//   useEffect(() => {\n//     const initializeProvider = async () => {\n//       const provider = await detectEthereumProvider();\n\n//       if (provider) {\n//         setProvider(provider);\n//         subscribeToAccountsChanges(provider);\n//       } else {\n//         console.error('Please install Metamask to interact with the wallet.');\n//       }\n//     };\n\n//     initializeProvider();\n//   }, []);\n\n//   const subscribeToAccountsChanges = (provider) => {\n//     provider.on('accountsChanged', (accounts) => {\n//       setWalletAddress(accounts[0]);\n//     });\n//   };\n\n//   const connectWallet = async () => {\n//     try {\n//       await provider.request({ method: 'eth_requestAccounts' });\n//     } catch (error) {\n//       console.error('Error connecting to the wallet:', error);\n//     }\n//   };\n\n//   const getBalance = async () => {\n//     if (walletAddress && provider) {\n//       const { getBalance } = new ethers.providers.Web3Provider(provider);\n//       const balance = await getBalance(walletAddress);\n//       setBalance(ethers.utils.formatEther(balance));\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Metamask Wallet Integration</h1>\n//       <p>Wallet Address: {walletAddress}</p>\n//       <p>Balance: {balance} ETH</p>\n//       <button onClick={connectWallet}>Connect Wallet</button>\n//       <button onClick={getBalance}>Get Balance</button>\n//       {/* Add other transaction functions and UI elements */}\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { ethers } from 'ethers';\nimport SimpleContractABI from './contracts/SimpleContract.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [contractValue, setContractValue] = useState('');\n  const [newValue, setNewValue] = useState('');\n  const [contractOwner, setContractOwner] = useState('');\n  const [contractBalance, setContractBalance] = useState(0);\n  const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n  const contractAddress = '0x49fd2BE640DB2910c2fAb69bB8531Ab6E76127ff';\n  const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n  const getContractValue = async () => {\n    const value = await contract.getValue();\n    setContractValue(value.toString());\n  };\n  const getContractOwner = async () => {\n    const owner = await contract.owner();\n    setContractOwner(owner);\n  };\n  const getContractBalance = async () => {\n    const balance = await provider.getBalance(contractAddress);\n    setContractBalance(ethers.utils.formatEther(balance));\n  };\n  useEffect(() => {\n    getContractValue();\n    getContractOwner();\n    getContractBalance();\n  }, []);\n  const handleSetValue = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const signer = provider.getSigner(accounts[0]);\n        const contractWithSigner = contract.connect(signer);\n        await contractWithSigner.setValue(newValue);\n        getContractValue();\n      } else {\n        alert('MetaMask is not installed or not accessible.');\n      }\n    } catch (error) {\n      console.error('Error sending transaction:', error);\n    }\n  };\n  const handleIncrementValue = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const signer = provider.getSigner(accounts[0]);\n        const contractWithSigner = contract.connect(signer);\n        await contractWithSigner.incrementValue();\n        getContractValue();\n      } else {\n        alert('MetaMask is not installed or not accessible.');\n      }\n    } catch (error) {\n      console.error('Error sending transaction:', error);\n    }\n  };\n  const handleDecrementValue = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const signer = provider.getSigner(accounts[0]);\n        const contractWithSigner = contract.connect(signer);\n        await contractWithSigner.decrementValue();\n        getContractValue();\n      } else {\n        alert('MetaMask is not installed or not accessible.');\n      }\n    } catch (error) {\n      console.error('Error sending transaction:', error);\n    }\n  };\n  const handleDonateEther = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const signer = provider.getSigner(accounts[0]);\n        const contractWithSigner = contract.connect(signer);\n\n        // Let's send 0.1 Ether as a donation (can be customized as needed)\n        const donationAmount = ethers.utils.parseEther('0.1');\n        await contractWithSigner.donate({\n          value: donationAmount\n        });\n        getContractBalance();\n      } else {\n        alert('MetaMask is not installed or not accessible.');\n      }\n    } catch (error) {\n      console.error('Error sending transaction:', error);\n    }\n  };\n  const handleWithdrawEther = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const signer = provider.getSigner(accounts[0]);\n        const contractWithSigner = contract.connect(signer);\n\n        // Check if the sender is the contract owner before allowing the withdrawal\n        const owner = await contract.owner();\n        if (accounts[0] !== owner) {\n          alert('You are not the contract owner. Only the owner can withdraw Ether.');\n          return;\n        }\n        await contractWithSigner.withdraw();\n        getContractBalance();\n      } else {\n        alert('MetaMask is not installed or not accessible.');\n      }\n    } catch (error) {\n      console.error('Error sending transaction:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SimpleContract Frontend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Contract Value: \", contractValue]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Contract Owner: \", contractOwner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Contract Balance: \", contractBalance, \" Ether\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: newValue,\n        onChange: e => setNewValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSetValue,\n        children: \"Set Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleIncrementValue,\n      children: \"Increment Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDecrementValue,\n      children: \"Decrement Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDonateEther,\n      children: \"Donate Ether\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleWithdrawEther,\n      children: \"Withdraw Ether (Owner Only)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 419,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6M6WNRGMn6+TQSGHHzBfZOlRY9w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ethers","SimpleContractABI","jsxDEV","_jsxDEV","App","_s","contractValue","setContractValue","newValue","setNewValue","contractOwner","setContractOwner","contractBalance","setContractBalance","provider","providers","JsonRpcProvider","contractAddress","contract","Contract","abi","getContractValue","value","getValue","toString","getContractOwner","owner","getContractBalance","balance","getBalance","utils","formatEther","handleSetValue","window","ethereum","accounts","request","method","signer","getSigner","contractWithSigner","connect","setValue","alert","error","console","handleIncrementValue","incrementValue","handleDecrementValue","decrementValue","handleDonateEther","donationAmount","parseEther","donate","handleWithdrawEther","withdraw","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/krpra/Desktop/Dapps/my-dapp/src/App.js"],"sourcesContent":["// src/App.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9'; // Replace with the deployed contract address from deploy.js\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider.getSigner());\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const incrementValue = async () => {\r\n//     await contract.incrementValue();\r\n//     getContractValue();\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     await contract.decrementValue();\r\n//     getContractValue();\r\n//   };\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setNewValue(event.target.value);\r\n//   };\r\n\r\n//   const setValue = async () => {\r\n//     if (!newValue) return;\r\n//     await contract.setValue(newValue);\r\n//     getContractValue();\r\n//     setNewValue('');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//       <br />\r\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\r\n//       <button onClick={setValue}>Set Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const incrementValue = async () => {\r\n//     try {\r\n//       // Check if MetaMask is installed and accessible\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.incrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.decrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const handleSetValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.setValue(newValue);\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleIncrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.incrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDecrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.decrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <div>\r\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\r\n//         <button onClick={handleSetValue}>Set Value</button>\r\n//       </div>\r\n//       <button onClick={handleIncrementValue}>Increment Value</button>\r\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\n// import { useState, useEffect } from 'react';\r\n// import { ethers } from 'ethers';\r\n// import detectEthereumProvider from '@metamask/detect-provider';\r\n\r\n// const App = () => {\r\n//   const [provider, setProvider] = useState(null);\r\n//   const [walletAddress, setWalletAddress] = useState('');\r\n//   const [balance, setBalance] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const initializeProvider = async () => {\r\n//       const provider = await detectEthereumProvider();\r\n\r\n//       if (provider) {\r\n//         setProvider(provider);\r\n//         subscribeToAccountsChanges(provider);\r\n//       } else {\r\n//         console.error('Please install Metamask to interact with the wallet.');\r\n//       }\r\n//     };\r\n\r\n//     initializeProvider();\r\n//   }, []);\r\n\r\n//   const subscribeToAccountsChanges = (provider) => {\r\n//     provider.on('accountsChanged', (accounts) => {\r\n//       setWalletAddress(accounts[0]);\r\n//     });\r\n//   };\r\n\r\n//   const connectWallet = async () => {\r\n//     try {\r\n//       await provider.request({ method: 'eth_requestAccounts' });\r\n//     } catch (error) {\r\n//       console.error('Error connecting to the wallet:', error);\r\n//     }\r\n//   };\r\n\r\n//   const getBalance = async () => {\r\n//     if (walletAddress && provider) {\r\n//       const { getBalance } = new ethers.providers.Web3Provider(provider);\r\n//       const balance = await getBalance(walletAddress);\r\n//       setBalance(ethers.utils.formatEther(balance));\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>Metamask Wallet Integration</h1>\r\n//       <p>Wallet Address: {walletAddress}</p>\r\n//       <p>Balance: {balance} ETH</p>\r\n//       <button onClick={connectWallet}>Connect Wallet</button>\r\n//       <button onClick={getBalance}>Get Balance</button>\r\n//       {/* Add other transaction functions and UI elements */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { ethers } from 'ethers';\r\nimport SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\nconst App = () => {\r\n  const [contractValue, setContractValue] = useState('');\r\n  const [newValue, setNewValue] = useState('');\r\n  const [contractOwner, setContractOwner] = useState('');\r\n  const [contractBalance, setContractBalance] = useState(0);\r\n\r\n  const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n  const contractAddress = '0x49fd2BE640DB2910c2fAb69bB8531Ab6E76127ff';\r\n  const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n  const getContractValue = async () => {\r\n    const value = await contract.getValue();\r\n    setContractValue(value.toString());\r\n  };\r\n\r\n  const getContractOwner = async () => {\r\n    const owner = await contract.owner();\r\n    setContractOwner(owner);\r\n  };\r\n\r\n  const getContractBalance = async () => {\r\n    const balance = await provider.getBalance(contractAddress);\r\n    setContractBalance(ethers.utils.formatEther(balance));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getContractValue();\r\n    getContractOwner();\r\n    getContractBalance();\r\n  }, []);\r\n\r\n  const handleSetValue = async () => {\r\n    try {\r\n      if (window.ethereum) {\r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        const signer = provider.getSigner(accounts[0]);\r\n        const contractWithSigner = contract.connect(signer);\r\n\r\n        await contractWithSigner.setValue(newValue);\r\n        getContractValue();\r\n      } else {\r\n        alert('MetaMask is not installed or not accessible.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending transaction:', error);\r\n    }\r\n  };\r\n\r\n  const handleIncrementValue = async () => {\r\n    try {\r\n      if (window.ethereum) {\r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        const signer = provider.getSigner(accounts[0]);\r\n        const contractWithSigner = contract.connect(signer);\r\n\r\n        await contractWithSigner.incrementValue();\r\n        getContractValue();\r\n      } else {\r\n        alert('MetaMask is not installed or not accessible.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending transaction:', error);\r\n    }\r\n  };\r\n\r\n  const handleDecrementValue = async () => {\r\n    try {\r\n      if (window.ethereum) {\r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        const signer = provider.getSigner(accounts[0]);\r\n        const contractWithSigner = contract.connect(signer);\r\n\r\n        await contractWithSigner.decrementValue();\r\n        getContractValue();\r\n      } else {\r\n        alert('MetaMask is not installed or not accessible.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending transaction:', error);\r\n    }\r\n  };\r\n\r\n  const handleDonateEther = async () => {\r\n    try {\r\n      if (window.ethereum) {\r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        const signer = provider.getSigner(accounts[0]);\r\n        const contractWithSigner = contract.connect(signer);\r\n\r\n        // Let's send 0.1 Ether as a donation (can be customized as needed)\r\n        const donationAmount = ethers.utils.parseEther('0.1');\r\n        await contractWithSigner.donate({ value: donationAmount });\r\n        getContractBalance();\r\n      } else {\r\n        alert('MetaMask is not installed or not accessible.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending transaction:', error);\r\n    }\r\n  };\r\n\r\n  const handleWithdrawEther = async () => {\r\n    try {\r\n      if (window.ethereum) {\r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        const signer = provider.getSigner(accounts[0]);\r\n        const contractWithSigner = contract.connect(signer);\r\n\r\n        // Check if the sender is the contract owner before allowing the withdrawal\r\n        const owner = await contract.owner();\r\n        if (accounts[0] !== owner) {\r\n          alert('You are not the contract owner. Only the owner can withdraw Ether.');\r\n          return;\r\n        }\r\n\r\n        await contractWithSigner.withdraw();\r\n        getContractBalance();\r\n      } else {\r\n        alert('MetaMask is not installed or not accessible.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending transaction:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>SimpleContract Frontend</h1>\r\n      <p>Contract Value: {contractValue}</p>\r\n      <p>Contract Owner: {contractOwner}</p>\r\n      <p>Contract Balance: {contractBalance} Ether</p>\r\n      <div>\r\n        <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\r\n        <button onClick={handleSetValue}>Set Value</button>\r\n      </div>\r\n      <button onClick={handleIncrementValue}>Increment Value</button>\r\n      <button onClick={handleDecrementValue}>Decrement Value</button>\r\n      <button onClick={handleDonateEther}>Donate Ether</button>\r\n      <button onClick={handleWithdrawEther}>Withdraw Ether (Owner Only)</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}